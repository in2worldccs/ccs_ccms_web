#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
const fs = require('fs');
var debug = require('debug')('ccs:server');
var https = require('https');
//var socket = require('socket.io');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// const options = {
//      key:  fs.readFileSync(__dirname + "../../../ibrahemayyad.ga.key"),
//      cert: fs.readFileSync(__dirname + "../../../ibrahemayyad.ga.crt")
// };


/**
 * Create HTTP server.
 */

// var server = https.createServer(app);

const server = https.createServer({
    key: fs.readFileSync("/var/cert/1ibrahemayyad.ga.key", 'utf8'),
    cert: fs.readFileSync("/var/cert/1ibrahemayyad.ga.crt", 'utf8'),
    ca: fs.readFileSync("/var/cert/chain.pem", 'utf8')
}, app);

//var sio = socket(server);

/*
sio.on('connection', function (visitor) {
    console.log('user avilabel now by id=>', visitor.id);
    //send data to the users

    visitor.on('disconnect', function () {
        console.log('user disconnect now by id=>', visitor.id);

    });

    visitor.on('message', function (data) {

        for (var socketid in sio.sockets.sockets) {
            console.log('id=>', socketid, "my id is :", visitor.id);
            if (socketid != visitor.id) {
                sio.to(socketid).emit('new_msg', data)

            }
            //sio.to.socket(socketid).emit('new_msg',data)
            //sio.broadcast.to(socketid).emit('new_msg',data)
        }

        console.log("message..........." + data);
        //sio.sockets.emit('new_msg',data);
        console.log("The server successfully sent the message to all users");
    });


    visitor.on('typing', function (data) {
        sio.sockets.emit('new_msg', data);
        console.log(visitor.id + " is typing");
    });

    visitor.on('borad', function (data) {
        visitor.broadcast.emit('new_brodcast', data);
    });
});
*/

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
